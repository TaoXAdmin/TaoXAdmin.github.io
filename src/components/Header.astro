---
import LangSwitcher from './LangSwitcher.astro';

const { lang = 'fr' } = Astro.props;

// i18n
const labels = {
  fr: { home: 'Accueil', services: 'Services', cases: 'Cas', about: 'À propos', blog: 'Blog', contact: 'Contact', menu: 'Menu' },
  en: { home: 'Home', services: 'Services', cases: 'Cases', about: 'About', blog: 'Blog', contact: 'Contact', menu: 'Menu' },
  de: { home: 'Startseite', services: 'Dienstleistungen', cases: 'Referenzen', about: 'Über mich', blog: 'Blog', contact: 'Kontakt', menu: 'Menü' },
  pt: { home: 'Início', services: 'Serviços', cases: 'Projetos', about: 'Sobre', blog: 'Blog', contact: 'Contato', menu: 'Menu' },
} as const;
const t = labels[lang] ?? labels.fr;

// items
const navItems = [
  { href: `/${lang}`, label: t.home },
  { href: `/${lang}/services`, label: t.services },
  { href: `/${lang}/cases`, label: t.cases },
  { href: `/${lang}/about`, label: t.about },
  { href: `/${lang}/blog`, label: t.blog },
  { href: `/${lang}/contact`, label: t.contact },
];

// active matching
const current = (Astro.url?.pathname ?? '/').replace(/\/$/, '');
const isActive = (href: string) => {
  const h = href.replace(/\/$/, '');
  if (h === `/${lang}`) return current === h;
  return current.startsWith(h);
};
---
<header class="sticky top-0 z-50 border-b border-neutral-200/80 dark:border-neutral-800/80 bg-white/90 dark:bg-neutral-950/80 backdrop-blur">
  <div class="container mx-auto px-4">
    <div class="h-14 flex items-center justify-between gap-3">
      <a href={`/${lang}`} class="text-xl font-semibold tracking-tight text-blue-600 dark:text-blue-400">Alexis Fiska</a>

      <!-- Desktop nav -->
      <nav class="hidden md:flex items-center gap-6" aria-label="Primary">
        {navItems.map((item) => (
          <a href={item.href} class="text-sm font-medium text-neutral-700 dark:text-neutral-200 hover:text-blue-600 dark:hover:text-blue-400">
            {item.label}
          </a>
        ))}
      </nav>

      <!-- Lang + burger -->
      <div class="flex items-center gap-2">
        <LangSwitcher currentLang={lang} path={Astro.url.pathname} />
        <button
          id="menu-open"
          class="md:hidden inline-flex items-center justify-center rounded-lg p-2 hover:bg-neutral-100 dark:hover:bg-neutral-800"
          aria-label="Ouvrir le menu"
          aria-haspopup="dialog"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
            <path d="M4 6h16M4 12h16M4 18h16" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Modal mobile améliorée -->
  <div id="mobile-menu" role="dialog" aria-modal="true" aria-labelledby="mobile-menu-title" aria-hidden="true" class="fixed inset-0 z-[60] pointer-events-none">
    <!-- Backdrop -->
    <div id="menu-backdrop" class="absolute inset-0 bg-black/50 opacity-0 transition-opacity duration-200 ease-out"></div>

    <!-- Panel centré (carte) -->
    <div id="menu-panel"
      class="absolute left-1/2 -translate-x-1/2 top-3 w-[min(92vw,640px)] max-h-[88vh] overflow-auto
             rounded-2xl bg-white dark:bg-neutral-900 shadow-2xl ring-1 ring-black/5 dark:ring-white/10
             p-5 pt-14 opacity-0 translate-y-4 scale-95 transition-all duration-200 ease-out">
      <div class="absolute right-3 top-3">
        <button id="menu-close" class="inline-flex items-center justify-center rounded-lg p-2 hover:bg-neutral-100 dark:hover:bg-neutral-800" aria-label="Fermer le menu">
          <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
            <path d="M6 6l12 12M18 6l-12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </button>
      </div>

      <h2 id="mobile-menu-title" class="text-xs uppercase tracking-wide text-neutral-500 dark:text-neutral-400 mb-4">{t.menu}</h2>

      <nav class="flex flex-col gap-1" aria-label="Mobile primary">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`group flex items-center justify-between gap-3 rounded-xl px-3 py-3 text-[16px] font-medium
                    hover:bg-neutral-100 dark:hover:bg-neutral-800
                    ${isActive(item.href) ? 'bg-blue-50 text-blue-700 dark:bg-blue-950/40 dark:text-blue-200 ring-1 ring-blue-100 dark:ring-blue-900' : 'text-neutral-800 dark:text-neutral-100'}`}
          >
            <span class="leading-none">{item.label}</span>
            <svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true"
                 class={`transition-opacity duration-150 ${isActive(item.href) ? 'opacity-100' : 'opacity-0 group-hover:opacity-100'}`}>
              <path d="M9 18l6-6-6-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
            </svg>
          </a>
        ))}
      </nav>

      <!-- CTA -->
      <div class="mt-4">
        <a href={`/${lang}/contact`}
           class="block w-full text-center rounded-xl px-4 py-3 text-[16px] font-semibold
                  bg-blue-600 text-white hover:bg-blue-700 shadow-sm">
          {t.contact}
        </a>
      </div>

      <!-- Lang switcher stylé -->
      <div class="mt-5 pt-4 border-t border-neutral-200 dark:border-neutral-800">
        <div class="rounded-xl border border-neutral-200 dark:border-neutral-800 p-2 bg-neutral-50 dark:bg-neutral-900/40">
          <LangSwitcher currentLang={lang} path={Astro.url.pathname} />
        </div>
      </div>

      <div class="pb-[env(safe-area-inset-bottom)]"></div>
    </div>
  </div>

  <!-- JS (sans TypeScript) -->
  <script is:inline>
    (function () {
      const root = document.getElementById('mobile-menu');
      const openBtn = document.getElementById('menu-open');
      const closeBtn = document.getElementById('menu-close');
      const backdrop = document.getElementById('menu-backdrop');
      const panel = document.getElementById('menu-panel');
      if (!root || !openBtn || !closeBtn || !backdrop || !panel) return;

      const focusable = [
        'a[href]','button:not([disabled])','textarea','input[type="text"]',
        'input[type="radio"]','input[type="checkbox"]','select'
      ].join(',');

      function trapFocus(e) {
        if (e.key !== 'Tab') return;
        const nodes = Array.from(panel.querySelectorAll(focusable));
        if (!nodes.length) return;
        const first = nodes[0], last = nodes[nodes.length - 1];
        if (e.shiftKey && document.activeElement === first) { e.preventDefault(); last.focus(); }
        else if (!e.shiftKey && document.activeElement === last) { e.preventDefault(); first.focus(); }
      }

      function onKeyDown(e) {
        if (e.key === 'Escape') close();
        trapFocus(e);
      }

      function open() {
        root.setAttribute('aria-hidden', 'false');
        root.classList.add('pointer-events-auto');
        requestAnimationFrame(() => {
          backdrop.classList.add('opacity-100');
          panel.classList.remove('opacity-0','translate-y-4','scale-95');
          panel.classList.add('opacity-100','translate-y-0','scale-100');
        });
        openBtn.setAttribute('aria-expanded', 'true');
        document.body.classList.add('overflow-hidden');
        const f = panel.querySelector(focusable); if (f && f.focus) f.focus();
        document.addEventListener('keydown', onKeyDown);
      }

      function close() {
        backdrop.classList.remove('opacity-100');
        panel.classList.add('opacity-0','translate-y-4','scale-95');
        openBtn.setAttribute('aria-expanded', 'false');
        document.body.classList.remove('overflow-hidden');
        const onEnd = () => {
          root.classList.remove('pointer-events-auto');
          root.setAttribute('aria-hidden', 'true');
          panel.removeEventListener('transitionend', onEnd);
          if (openBtn.focus) openBtn.focus();
          document.removeEventListener('keydown', onKeyDown);
        };
        panel.addEventListener('transitionend', onEnd, { once: true });
      }

      openBtn.addEventListener('click', open);
      closeBtn.addEventListener('click', close);
      backdrop.addEventListener('click', close);
    })();
  </script>
</header>
