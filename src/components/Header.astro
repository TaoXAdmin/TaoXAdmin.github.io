---
import LangSwitcher from './LangSwitcher.astro';

const { lang = 'fr' } = Astro.props;

// i18n labels
const labels = {
  fr: { home: 'Accueil', services: 'Services', cases: 'Cas', about: 'À propos', blog: 'Blog', contact: 'Contact' },
  en: { home: 'Home', services: 'Services', cases: 'Cases', about: 'About', blog: 'Blog', contact: 'Contact' },
  de: { home: 'Startseite', services: 'Dienstleistungen', cases: 'Referenzen', about: 'Über mich', blog: 'Blog', contact: 'Kontakt' },
  pt: { home: 'Início', services: 'Serviços', cases: 'Projetos', about: 'Sobre', blog: 'Blog', contact: 'Contato' },
};
const t = labels[lang] ?? labels.fr;

const navItems = [
  { href: `/${lang}`, label: t.home },
  { href: `/${lang}/services`, label: t.services },
  { href: `/${lang}/cases`, label: t.cases },
  { href: `/${lang}/about`, label: t.about },
  { href: `/${lang}/blog`, label: t.blog },
  { href: `/${lang}/contact`, label: t.contact },
];
---
<header class="sticky top-0 z-50 border-b border-neutral-200/80 dark:border-neutral-800/80 bg-white/90 dark:bg-neutral-950/80 backdrop-blur">
  <div class="container mx-auto px-4">
    <div class="h-14 flex items-center justify-between gap-3">
      <a href={`/${lang}`} class="text-xl font-semibold tracking-tight text-blue-600 dark:text-blue-400">Alexis Fiska</a>

      <!-- Desktop nav -->
      <nav class="hidden md:flex items-center gap-6" aria-label="Primary">
        {navItems.map((item) => (
          <a href={item.href} class="text-sm font-medium text-neutral-700 dark:text-neutral-200 hover:text-blue-600 dark:hover:text-blue-400">
            {item.label}
          </a>
        ))}
      </nav>

      <!-- Lang + burger -->
      <div class="flex items-center gap-2">
        <LangSwitcher currentLang={lang} path={Astro.url.pathname} />
        <button
          id="menu-open"
          class="md:hidden inline-flex items-center justify-center rounded-lg p-2 hover:bg-neutral-100 dark:hover:bg-neutral-800"
          aria-label="Ouvrir le menu"
          aria-haspopup="dialog"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
            <path d="M4 6h16M4 12h16M4 18h16" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Modal mobile (présente dans le DOM, invisible par défaut) -->
  <div
    id="mobile-menu"
    role="dialog"
    aria-modal="true"
    aria-labelledby="mobile-menu-title"
    aria-hidden="true"
    class="fixed inset-0 z-[60] pointer-events-none"
  >
    <!-- Backdrop -->
    <div
      id="menu-backdrop"
      class="absolute inset-0 bg-black/40 opacity-0 transition-opacity duration-200 ease-out"
    ></div>

    <!-- Sheet (panneau) -->
    <div
      id="menu-panel"
      class="absolute inset-x-0 top-0 max-h-[90vh] overflow-auto rounded-b-2xl bg-white dark:bg-neutral-900 shadow-xl
             p-4 pt-16 translate-y-4 opacity-0 scale-95 transition-all duration-200 ease-out
             supports-[backdrop-filter]:bg-white/90 supports-[backdrop-filter]:backdrop-blur"
    >
      <div class="container mx-auto px-2">
        <div class="absolute right-3 top-3">
          <button
            id="menu-close"
            class="inline-flex items-center justify-center rounded-lg p-2 hover:bg-neutral-100 dark:hover:bg-neutral-800"
            aria-label="Fermer le menu"
          >
            <svg width="22" height="22" viewBox="0 0 24 24" fill="none" aria-hidden="true">
              <path d="M6 6l12 12M18 6l-12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
          </button>
        </div>

        <h2 id="mobile-menu-title" class="text-sm font-semibold text-neutral-500 dark:text-neutral-400 mb-3">Menu</h2>

        <nav class="flex flex-col" aria-label="Mobile primary">
          {navItems.map((item) => (
            <a
              href={item.href}
              class="group flex items-center justify-between px-2 py-3 rounded-lg text-lg
                     hover:bg-neutral-100 dark:hover:bg-neutral-800"
            >
              <span>{item.label}</span>
              <svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true"
                   class="opacity-0 group-hover:opacity-100 transition-opacity duration-150">
                <path d="M9 18l6-6-6-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
              </svg>
            </a>
          ))}
        </nav>

        <div class="mt-4 pt-3 border-t border-neutral-200 dark:border-neutral-800">
          <LangSwitcher currentLang={lang} path={Astro.url.pathname} />
        </div>

        <!-- safe area iOS -->
        <div class="pb-[env(safe-area-inset-bottom)]"></div>
      </div>
    </div>
  </div>

  <!-- JS: ouverture/fermeture + animation (JS pur) -->
  <script is:inline>
    (function () {
      const root = document.getElementById('mobile-menu');
      const openBtn = document.getElementById('menu-open');
      const closeBtn = document.getElementById('menu-close');
      const backdrop = document.getElementById('menu-backdrop');
      const panel = document.getElementById('menu-panel');

      if (!root || !openBtn || !closeBtn || !backdrop || !panel) return;

      const focusableSelectors = [
        'a[href]','button:not([disabled])','textarea','input[type="text"]',
        'input[type="radio"]','input[type="checkbox"]','select'
      ].join(',');

      function trapFocus(e) {
        if (e.key !== 'Tab') return;
        const nodes = Array.from(root.querySelectorAll(focusableSelectors));
        if (!nodes.length) return;
        const first = nodes[0];
        const last = nodes[nodes.length - 1];
        if (e.shiftKey && document.activeElement === first) {
          e.preventDefault(); last.focus();
        } else if (!e.shiftKey && document.activeElement === last) {
          e.preventDefault(); first.focus();
        }
      }

      function onKeyDown(e) {
        if (e.key === 'Escape') close();
        trapFocus(e);
      }

      function open() {
        root.setAttribute('aria-hidden', 'false');
        root.classList.add('pointer-events-auto');

        // lance la transition au prochain frame
        requestAnimationFrame(() => {
          backdrop.classList.add('opacity-100');
          panel.classList.remove('translate-y-4','opacity-0','scale-95');
          panel.classList.add('translate-y-0','opacity-100','scale-100');
        });

        openBtn.setAttribute('aria-expanded', 'true');
        document.body.classList.add('overflow-hidden');

        // focus le premier lien
        const f = panel.querySelector(focusableSelectors);
        if (f && typeof f.focus === 'function') f.focus();

        document.addEventListener('keydown', onKeyDown);
      }

      function close() {
        backdrop.classList.remove('opacity-100');
        panel.classList.add('translate-y-4','opacity-0','scale-95');

        openBtn.setAttribute('aria-expanded', 'false');
        document.body.classList.remove('overflow-hidden');

        function after() {
          root.classList.remove('pointer-events-auto');
          root.setAttribute('aria-hidden', 'true');
          panel.removeEventListener('transitionend', after);
          if (typeof openBtn.focus === 'function') openBtn.focus();
          document.removeEventListener('keydown', onKeyDown);
        }
        panel.addEventListener('transitionend', after, { once: true });
      }

      openBtn.addEventListener('click', open);
      closeBtn.addEventListener('click', close);
      backdrop.addEventListener('click', close);
    })();
  </script>
</header>
